//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""aa2c816c-448e-4a5f-9102-0a8d3626815f"",
            ""actions"": [
                {
                    ""name"": ""BearWalk"",
                    ""type"": ""Value"",
                    ""id"": ""5ae7f4c5-683b-4ebd-a449-36b2923ea1a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sleep"",
                    ""type"": ""Button"",
                    ""id"": ""1c326384-aa66-44a1-84b7-8565ffc315bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""59be19d9-1d53-465c-8f2c-6008b2e062ac"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5914dad2-b1a9-4602-9c60-bd1002944573"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f30cc8f9-ddca-4926-b101-ba95ff131852"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b51c164-ad95-4cb7-9920-aeb3b1032c39"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3966a16b-e795-465d-bf13-7d5d9defaa93"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""447d7b9e-0dc6-4810-8344-ae2863cee281"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""e1c6fccd-9042-4c98-837a-89d3f1dc5ba0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BearWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""71f46d0d-564d-4c0c-ab55-050236cf8a69"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sleep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ASL"",
            ""id"": ""b999d7c1-cc31-46e9-8534-91c45849c374"",
            ""actions"": [
                {
                    ""name"": ""PrintASL"",
                    ""type"": ""Button"",
                    ""id"": ""2f970c87-d959-475a-9432-5d429404379d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38bd7206-7af9-491d-ad52-ee174e807efe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrintASL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_BearWalk = m_Player.FindAction("BearWalk", throwIfNotFound: true);
        m_Player_Sleep = m_Player.FindAction("Sleep", throwIfNotFound: true);
        // ASL
        m_ASL = asset.FindActionMap("ASL", throwIfNotFound: true);
        m_ASL_PrintASL = m_ASL.FindAction("PrintASL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_BearWalk;
    private readonly InputAction m_Player_Sleep;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BearWalk => m_Wrapper.m_Player_BearWalk;
        public InputAction @Sleep => m_Wrapper.m_Player_Sleep;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @BearWalk.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBearWalk;
                @BearWalk.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBearWalk;
                @BearWalk.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBearWalk;
                @Sleep.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
                @Sleep.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
                @Sleep.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSleep;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BearWalk.started += instance.OnBearWalk;
                @BearWalk.performed += instance.OnBearWalk;
                @BearWalk.canceled += instance.OnBearWalk;
                @Sleep.started += instance.OnSleep;
                @Sleep.performed += instance.OnSleep;
                @Sleep.canceled += instance.OnSleep;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ASL
    private readonly InputActionMap m_ASL;
    private IASLActions m_ASLActionsCallbackInterface;
    private readonly InputAction m_ASL_PrintASL;
    public struct ASLActions
    {
        private @PlayerInputActions m_Wrapper;
        public ASLActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrintASL => m_Wrapper.m_ASL_PrintASL;
        public InputActionMap Get() { return m_Wrapper.m_ASL; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ASLActions set) { return set.Get(); }
        public void SetCallbacks(IASLActions instance)
        {
            if (m_Wrapper.m_ASLActionsCallbackInterface != null)
            {
                @PrintASL.started -= m_Wrapper.m_ASLActionsCallbackInterface.OnPrintASL;
                @PrintASL.performed -= m_Wrapper.m_ASLActionsCallbackInterface.OnPrintASL;
                @PrintASL.canceled -= m_Wrapper.m_ASLActionsCallbackInterface.OnPrintASL;
            }
            m_Wrapper.m_ASLActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrintASL.started += instance.OnPrintASL;
                @PrintASL.performed += instance.OnPrintASL;
                @PrintASL.canceled += instance.OnPrintASL;
            }
        }
    }
    public ASLActions @ASL => new ASLActions(this);
    public interface IPlayerActions
    {
        void OnBearWalk(InputAction.CallbackContext context);
        void OnSleep(InputAction.CallbackContext context);
    }
    public interface IASLActions
    {
        void OnPrintASL(InputAction.CallbackContext context);
    }
}
